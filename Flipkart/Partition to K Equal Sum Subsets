class Solution {
public:
    bool helper(int i, int bucketNum, int bucketSum, int reqSum,int k, vector<int> &nums, vector<int>& alreadyPicked){
        //base
        if(bucketNum == k+1) return true; 
        if(bucketSum == reqSum){
            return helper(0,bucketNum+1,0, reqSum, k, nums,alreadyPicked);
        }
        if(bucketSum>reqSum) return false;
        if(i>=nums.size()) return false;

    if(alreadyPicked[i]==1){
        return helper(i+1, bucketNum,bucketSum,reqSum,k,nums,alreadyPicked);
    }
    else{
        //picked up
        bucketSum+= nums[i];
        alreadyPicked[i]=1;
        bool op1 = helper(i+1,bucketNum, bucketSum, reqSum,k,nums,alreadyPicked);

        //skip
        bucketSum-= nums[i];
        alreadyPicked[i]=0;
        bool op2 = helper(i+1,bucketNum, bucketSum, reqSum,k,nums,alreadyPicked);

        return op1 | op2;

    }
    }
    bool canPartitionKSubsets(vector<int>& nums, int n,int k) {
        vector<int> alreadyPicked(n,0);
        int sum =0;
        for(int i=0; i<n; i++) 
        sum+=nums[i];
        if(sum%k !=0) return false;
        int reqSum = sum/k;

        return helper(0,1,0,reqSum,k,nums,alreadyPicked);
        
    }
};